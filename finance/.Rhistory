package.skeleton("stockAnalytics")
package.skeleton("stockAnalytics")
library(devtools)
package.skeleton("stockAnalytics")
source("~/DataScience/datascience/finance/downloadExchangeCompanyList.R", encoding = "Windows-1252")
package.skeleton("stockAnalytics")
document("stockAnalytics")
install("stockAnalytics")
document("stockAnalytics")
document("stockAnalytics")
install("stockAnalytics")
install("stockAnalytics")
?stockAnalytics
?downloadExchangeCompanyList
uninstall(stockAnalysis)
test()
test(stockAnalytics)
test("stockAnalytics")
test("stockAnalytics")
test("stockAnalytics")
test("stockAnalytics")
?downloadExchangeCompanyList
test("stockAnalytics")
test_that("downloadExchangeCompanyList: Single output file.", {
    # Initialize
    exchange = "NASDAQ"
    dataFolder = "./datatest"
    actual <- unlist(downloadExchangeCompanyList(exchange, dataFolder))
    expected <- paste(dataFolder, "/", exchange, "-companylist", ".csv", sep = "")
    #printActualExpected(actual, expected)
    expect_equal(actual, expected, msg = "File name is not in correct format.")
    expect_true(file.exists(expected))
    # Cleanup
    if (file.exists(dataFolder)) {
        unlink(dataFolder, recursive = T, force = T)
    }
})
test_that("downloadExchangeCompanyList: Single output file.", {
    # Initialize
    exchange = "NASDAQ"
    dataFolder = "./datatest"
    actual <- unlist(downloadExchangeCompanyList(exchange, dataFolder))
    expected <- paste(dataFolder, "/", exchange, "-companylist", ".csv", sep = "")
    #printActualExpected(actual, expected)
    expect_equal(actual, expected, msg = "File name is not in correct format.")
    expect_false(file.exists(expected))
    # Cleanup
    if (file.exists(dataFolder)) {
        unlink(dataFolder, recursive = T, force = T)
    }
})
test_that("downloadExchangeCompanyList: Single output file.", {
    # Initialize
    exchange = "NASDAQ"
    dataFolder = "./datatest"
    actual <- downloadExchangeCompanyList(exchange, dataFolder)
    expected <- paste(dataFolder, "/", exchange, "-companylist", ".csv", sep = "")
    #printActualExpected(actual, expected)
    expect_equal(actual, expected, msg = "File name is not in correct format.")
    expect_true(file.exists(expected))
    # Cleanup
    if (file.exists(dataFolder)) {
        unlink(dataFolder, recursive = T, force = T)
    }
})
test_that("downloadExchangeCompanyList: Single output file.", {
    # Initialize
    exchange = "NASDAQ"
    dataFolder = "./datatest"
    actual <- downloadExchangeCompanyList(exchange, dataFolder)
    expected <- paste(dataFolder, "/", exchange, "-companylist", ".csv", sep = "")
    #printActualExpected(actual, expected)
    expect_equivalent(actual, expected, msg = "File name is not in correct format.")
    expect_true(file.exists(expected))
    # Cleanup
    if (file.exists(dataFolder)) {
        unlink(dataFolder, recursive = T, force = T)
    }
})
test_that("downloadExchangeCompanyList: Multiple output files.", {
    # Initialize
    exchanges = c("NASDAQ", "NYSE")
    dataFolder = "./datatest"
    #actual <- unlist(downloadExchangeCompanyList(exchange, dataFolder))
    #expected <- unlist(paste(dataFolder, "/", exchange, "-companylist", ".csv", sep = ""))
    #printActualExpected(actual, expected)
    #expect_equal(actual, expected, msg = "File name is not in correct format.")
    lapply(exchanges, function(exchange) {
        actual <- unlist(downloadExchangeCompanyList(exchange, dataFolder))
        expected <- paste(dataFolder, "/", exchange, "-companylist", ".csv", sep = "")
        printActualExpected(actual, expected)
        expect_equal(actual, expected, msg = "File name is not in correct format.")
        expect_true(file.exists(expected))
    })
    # Cleanup
    if (file.exists(dataFolder)) {
        unlink(dataFolder, recursive = T, force = T)
    }
})
test_that("downloadExchangeCompanyList: Multiple output files.", {
    # Initialize
    exchanges = c("NASDAQ", "NYSE")
    dataFolder = "./datatest"
    lapply(exchanges, function(exchange) {
        actual <- unlist(downloadExchangeCompanyList(exchange, dataFolder))
        expected <- paste(dataFolder, "/", exchange, "-companylist", ".csv", sep = "")
        printActualExpected(actual, expected)
        expect_equal(actual, expected, msg = "File name is not in correct format.")
        expect_true(file.exists(expected))
    })
    # Cleanup
    if (file.exists(dataFolder)) {
        unlink(dataFolder, recursive = T, force = T)
    }
})
test_that("downloadExchangeCompanyList: Multiple output files.", {
    # Initialize
    exchanges = c("NASDAQ", "NYSE")
    dataFolder = "./datatest"
    lapply(exchanges, function(exchange) {
        actual <- unlist(downloadExchangeCompanyList(exchange, dataFolder))
        expected <- paste(dataFolder, "/", exchange, "-companylist", ".csv", sep = "")
        #printActualExpected(actual, expected)
        expect_equal(actual, expected, msg = "File name is not in correct format.")
        expect_true(file.exists(expected))
    })
    # Cleanup
    #if (file.exists(dataFolder)) {
        #unlink(dataFolder, recursive = T, force = T)
    #}
})
?expect_true
library(testthat)
     Cleanup
    if (file.exists(dataFolder)) {
        unlink(dataFolder, recursive = T, force = T)
    }
    if (file.exists(dataFolder)) {
        unlink(dataFolder, recursive = T, force = T)
    }
test_that("downloadExchangeCompanyList: Multiple output files.", {
    # Initialize
    exchanges = c("NASDAQ", "NYSE")
    dataFolder = "./datatest"
    lapply(exchanges, function(exchange) {
        actual <- unlist(downloadExchangeCompanyList(exchange, dataFolder))
        expected <- paste(dataFolder, "/", exchange, "-companylist", ".csv", sep = "")
        #printActualExpected(actual, expected)
        expect_equal(actual, expected, msg = "File name is not in correct format.")
        expect_false(file.exists(expected), info = "File does not exist.")
    })
    # Cleanup
    if (file.exists(dataFolder)) {
        unlink(dataFolder, recursive = T, force = T)
    }
})
?read.csv
test_that("downloadExchangeCompanyList: Single output file.", {
    # Initialize
    exchange = "NASDAQ"
    dataFolder = "./datatest"
    actual <- unlist(downloadExchangeCompanyList(exchange, dataFolder))
    expected <- paste(dataFolder, "/", exchange, "-companylist", ".csv", sep = "")
    #printActualExpected(actual, expected)
    expect_equal(actual, expected, info = "File name is not in correct format.")
    expect_true(file.exists(expected), info = "File does not exist.")
    csvFile <- read.csv(expected)
    print(colnames(csvFile))
    # Cleanup
    if (file.exists(dataFolder)) {
        unlink(dataFolder, recursive = T, force = T)
    }
})
test_that("downloadExchangeCompanyList: Single output file.", {
    # Initialize
    exchange = "NASDAQ"
    dataFolder = "./datatest"
    actual <- unlist(downloadExchangeCompanyList(exchange, dataFolder))
    expected <- paste(dataFolder, "/", exchange, "-companylist", ".csv", sep = "")
    #printActualExpected(actual, expected)
    expect_equal(actual, expected, info = "File name is not in correct format.")
    expect_true(file.exists(expected), info = "File does not exist.")
    csvFile <- read.csv(expected)
    expect_true("Symbol1" %in% colnames(csvFile), info = "Column Symbol does not exist")
    # Cleanup
    if (file.exists(dataFolder)) {
        unlink(dataFolder, recursive = T, force = T)
    }
})
test_that("downloadExchangeCompanyList: Single output file.", {
    # Initialize
    exchange = "NASDAQ"
    dataFolder = "./datatest"
    actual <- unlist(downloadExchangeCompanyList(exchange, dataFolder))
    expected <- paste(dataFolder, "/", exchange, "-companylist", ".csv", sep = "")
    #printActualExpected(actual, expected)
    expect_equal(actual, expected, info = "File name is not in correct format.")
    expect_true(file.exists(expected), info = "File does not exist.")
    csvFile <- read.csv(expected)
    expect_true("Symbol" %in% colnames(csvFile), info = "Column Symbol does not exist")    
    # Cleanup
    if (file.exists(dataFolder)) {
        unlink(dataFolder, recursive = T, force = T)
    }
})
test_that("downloadExchangeCompanyList: Single output file.", {
    # Initialize
    exchange = "NASDAQ"
    dataFolder = "./datatest"
    actual <- unlist(downloadExchangeCompanyList(exchange, dataFolder))
    expected <- paste(dataFolder, "/", exchange, "-companylist", ".csv", sep = "")
    #printActualExpected(actual, expected)
    expect_equal(actual, expected, info = "File name is not in correct format.")
    expect_true(file.exists(expected), info = "File does not exist.")
    csvFile <- read.csv(expected)
    expect_true(c("Symbol", "Name") %in% colnames(csvFile), info = "Column does not exist")    
    # Cleanup
    if (file.exists(dataFolder)) {
        unlink(dataFolder, recursive = T, force = T)
    }
})
test_that("downloadExchangeCompanyList: Single output file.", {
    # Initialize
    exchange = "NASDAQ"
    dataFolder = "./datatest"
    actual <- unlist(downloadExchangeCompanyList(exchange, dataFolder))
    expected <- paste(dataFolder, "/", exchange, "-companylist", ".csv", sep = "")
    #printActualExpected(actual, expected)
    expect_equal(actual, expected, info = "File name is not in correct format.")
    expect_true(file.exists(expected), info = "File does not exist.")
    csvFile <- read.csv(expected)
    expect_true("Symbol" %in% colnames(csvFile), info = "Column does not exist")
    # Cleanup
    expect_true("Name " %in% colnames(csvFile), info = "Column does not exist") # Cleanup
    if (file.exists(dataFolder)) {
        unlink(dataFolder, recursive = T, force = T)
    }
})
test_that("downloadExchangeCompanyList: Single output file.", {
    # Initialize
    exchange = "NASDAQ"
    dataFolder = "./datatest"
    actual <- unlist(downloadExchangeCompanyList(exchange, dataFolder))
    expected <- paste(dataFolder, "/", exchange, "-companylist", ".csv", sep = "")
    #printActualExpected(actual, expected)
    expect_equal(actual, expected, info = "File name is not in correct format.")
    expect_true(file.exists(expected), info = "File does not exist.")
    csvFile <- read.csv(expected)
    expect_true("Symbol" %in% colnames(csvFile), info = "Column does not exist")
    # Cleanup
    expect_true("Name" %in% colnames(csvFile), info = "Column does not exist") # Cleanup
    if (file.exists(dataFolder)) {
        unlink(dataFolder, recursive = T, force = T)
    }
})
test("stockAnalytics")
?expect_message
expect_message(f(-1))
expect_message(print("testtt", "test"))
expect_message(print("testtt", "testtt"))
expect_message(print("testtt"), "testtt")
expect_message(message("testtt"), "testtt")
expect_message(message("testtt"), "test")
expect_message(message("testtt"), "testsadf")
test("stockAnalytics")
test_that("printActualExpected: ", {
    # Initialize
    actual <- "actual 123"
    expected <- "expected 456"
    msg <- "message"
    expect_message(printActualExpected(actual, expected, msg), paste(msg, " Actual123:", actual, "  Expected: ", expected, sep = ""))
    # Cleanup
})
test_that("printActualExpected: ", {
    # Initialize
    actual <- "actual 123"
    expected <- "expected 456"
    msg <- "message"
    expect_message(printActualExpected(actual, expected, msg), paste(msg, " Actual:", actual, "  Expected: ", expected, sep = ""))
    # Cleanup
})
test("stockAnalytics")
?expect_message
expect_output_file("Symbol", "~/DataScience/R/finance-analysis/data/nasdaq-companylist.csv")
expect_output_file(cat("Symbol"), "~/DataScience/R/finance-analysis/data/nasdaq-companylist.csv")
test("stockAnalytics")
?download.file
source("~/DataScience/datascience/finance/stockAnalytics/R/downloadExchangeCompanyList.R", encoding = "Windows-1252")
rtvs::debug_source("~/DataScience/datascience/finance/stockAnalytics/R/downloadExchangeCompanyList.R", encoding = "Windows-1252")
downloadExchangeCompanyList("NASDAQ", "./data1", "companylist")
colnames(csvData)
length(csvData)
nrow(csvData)
nrow(csvData)
csvData
downloadExchangeCompanyList("NASDAQ", "./data1", "companylist")
csvData <- csvData[,outputColumns]
csvData <- csvData[,1]
csvData
outputColumns
class(csvData)
downloadExchangeCompanyList("NASDAQ", "./data1", "companylist")
class(csvData)
class(csvData)
csvData[,c("Symbol")]
csvData[,c("Name")]
rtvs::debug_source("~/DataScience/datascience/finance/stockAnalytics/R/downloadExchangeCompanyList.R", encoding = "Windows-1252")
downloadExchangeCompanyList("NASDAQ", "./data1", "companylist")
csvData
?write.csv
source("~/DataScience/datascience/finance/stockAnalytics/R/downloadExchangeCompanyList.R", encoding = "Windows-1252")
downloadExchangeCompanyList("NASDAQ", "./data1", "companylist")
?wri
?write.csv
source("~/DataScience/datascience/finance/stockAnalytics/R/downloadExchangeCompanyList.R", encoding = "Windows-1252")
downloadExchangeCompanyList("NASDAQ", "./data1", "companylist")
downloadExchangeCompanyList("NASDAQ", "./data1", "companylist")
source("~/DataScience/datascience/finance/stockAnalytics/R/downloadExchangeCompanyList.R", encoding = "Windows-1252")
rtvs::debug_source("~/DataScience/datascience/finance/stockAnalytics/R/downloadExchangeCompanyList.R", encoding = "Windows-1252")
downloadExchangeCompanyList("NASDAQ", "./data1", "companylist")
csvData$Symbol
csvData$Symbol <- paste(exchange, csvData$Symbol, sep=":")
csvData$Symbol <- paste(x, csvData$Symbol, sep=":")
csvData$Symbol
source("~/DataScience/datascience/finance/stockAnalytics/R/getCommaSeperatedListOfRows.R", encoding = "Windows-1252")
getCommaSeperatedListOfRows("./data1/NASDAQ-companylist.csv")
x <- getCommaSeperatedListOfRows("./data1/NASDAQ-companylist.csv")
source("~/DataScience/datascience/finance/stockAnalytics/R/getCommaSeperatedListOfRows.R", encoding = "Windows-1252")
x <- getCommaSeperatedListOfRows("./data1/NASDAQ-companylist.csv")
source("~/DataScience/datascience/finance/stockAnalytics/R/getCommaSeperatedListOfRows.R", encoding = "Windows-1252")
x <- getCommaSeperatedListOfRows("./data1/NASDAQ-companylist.csv")
source("~/DataScience/datascience/finance/stockAnalytics/R/getCommaSeperatedListOfRows.R", encoding = "Windows-1252")
x <- getCommaSeperatedListOfRows("./data1/NASDAQ-companylist.csv")
x <- getCommaSeperatedListOfRows("./data1/NASDAQ-companylist.csv", take = 90)
